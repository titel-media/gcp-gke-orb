version: 2.1
description: Google Kubernetes Engine (GKE) Orb

# Orb Dependencies
orbs:
  gcloud: circleci/gcp-cli@1.0.6
  gcr: circleci/gcp-gcr@0.6.1
  k8s: circleci/kubernetes@0.1.0

commands:
  install:
    description: "Install `gcloud` and `kubectl` if not already installed."
    steps:
      - gcloud/install
      - k8s/install
  init:
    description: "Initialize the `gcloud` CLI."
    steps:
      - gcloud/initialize
  checkout-submodule:
    description: "checkout repo with submodules"
    steps:
      - checkout
      - run:
          name: "Pull Submodules"
          command: |
            git submodule init
            git submodule update
  rollout-image:
    description: "Update a deployment's Docker image."
    parameters:
      cluster:
        description: "The Kubernetes cluster name."
        type: string
      deployment:
        description: "The Kubernetes deployment name."
        type: string
        default: ""
      container:
        description: "The Kubernetes container name."
        type: string
      image:
        description: A name for your docker image
        type: string
      namespace:
        description: "The Kubernetes namespace name."
        type: string
        default: "default"
    steps:
      - run:
          name: Rollout image
          command: |
            gcloud container clusters get-credentials <<parameters.cluster>>
            if [ "x<<parameters.deployment>>" == "x" ] ; then
              _buildless_image=$(echo "<<parameters.image>>" | rev | cut -d. -f2- | rev)
              echo "Detecting resources that have a image starting with: $_buildless_image"
              for data in $(kubectl get --all-namespaces cronjob,deployment -o json | jq -c --arg img "${_buildless_image}" '.items[] | .kind as $kind | .metadata.name as $name | .metadata.namespace as $namespace | ((if .kind == "CronJob" then .spec.jobTemplate else . end) | .spec.template.spec.containers[]) | select(.image | startswith($img)) | {container: .name, name: $name, namespace: $namespace, kind: $kind}'); do
                echo "Found resource: $data"
                namespace=$(echo $data | jq -r .namespace)
                name=$(echo $data | jq -r .name)
                kind=$(echo $data | jq -r .kind)
                container=$(echo $data | jq -r .container)
                kubectl -n $namespace set image $kind/$name ${container}=<<parameters.image>>
                if test "$kind" = "Deployment"; then
                  kubectl -n $namespace rollout status $kind/$name
                fi
              done
            else
              kubectl -n <<parameters.namespace>> set image deployment <<parameters.deployment>> <<parameters.container>>=<<parameters.image>>
              kubectl -n <<parameters.namespace>> rollout status deployment <<parameters.deployment>>
            fi
  notify-datadog:
    description: Send a deploy event to DataDog
    parameters:
      api_key:
        description: Datadog API Key
        type: env_var_name
        default: DATADOG_API_KEY
      image:
        description: Deployed image
        type: string
    steps:
      - run:
          command: |
            curl -X POST -H "Content-type: application/json" --data \
              "{
                \"title\": \"Deployed <<parameters.image>>\",
                \"text\": \"Oh boy! New deployment for $CIRCLE_PROJECT_REPONAME on $CIRCLE_BRANCH. See more information here: $CIRCLE_BUILD_URL\",
                \"priority\": \"normal\",
                \"alert_type\": \"info\",
                \"source_type_name\": \"circleci\",
                \"aggregation_key\": \"deploys\",
                \"tags\": [
                  \"kube_deployment:$CIRCLE_PROJECT_REPONAME\",
                  \"repository:$CIRCLE_PROJECT_REPONAME\",
                  \"organization:$CIRCLE_PROJECT_USERNAME\",
                  \"branch:$CIRCLE_BRANCH\",
                  \"build_num:$CIRCLE_BUILD_NUM\",
                  \"job:$CIRCLE_JOB\",
                  \"started_by:$CIRCLE_USERNAME\"
                ]
              }" "https://api.datadoghq.com/api/v1/events?api_key=$<<parameters.api_key>>"
          name: Datadog - Sending Deploy Event
          when: on_success
  notify-sentry:
    description: Send a deploy event to Sentry
    parameters:
      api_key:
        description: Sentry API Key
        type: env_var_name
        default: SENTRY_API_KEY
      version:
        description: Release version
        type: string
      environment:
        description: The environment the build is deploying to
        type: env_var_name
        default: ENVIRONMENT
      organization:
        description: Sentry organization slug
        type: string
        default: titelmedia-gmbh
    steps:
      - run:
          command: |
            if [[ -z "$<<parameters.api_key>>" ]]; then
              echo "Skipping Sentry notification as SENTRY_API_KEY not set"
            else
              curl  -XPOST -s -H 'Content-Type: application/json' \
                -H "Authorization: Bearer $<<parameters.api_key>>" --data \
                "{
                  \"environment\":\"$<<parameters.environment>>\",
                  \"url\":\"$CIRCLE_BUILD_URL\"
                }" "https://sentry.io/api/0/organizations/<<parameters.organization>>/releases/$CIRCLE_BRANCH.b$CIRCLE_BUILD_NUM/deploys/"
            fi
          name: Sentry - Sending Deploy Event
          when: on_success
  notify-slack:
    description: Send a deploy event to Slack
    parameters:
      web_hook:
        description: Slack Webhook URL
        type: env_var_name
        default: SLACK_WEBHOOK_URL
      text:
        description: Message to post to slack
        type: string
        default: "Oh boy!"
      channel:
        description: Slack channel to post message
        type: string
        default: "#deployments"
      username:
        description: Slack username to send message as
        type: string
        default: webhookbot
    steps:
      - run:
          command: |
            if [[ -z "$<<parameters.web_hook>>" ]]; then
              echo "Skipping Slack notification as <<parameters.web_hook>> not set"
            else
              GIT_COMMIT_DESC="$(git log --format=%B -n 1 $CIRCLE_SHA1)"
              emoji=$(echo :computer: :cool: :8ball: :thumbsup_all: | xargs -n1 echo | sort -R | head -n1)
              curl -XPOST --data-urlencode "payload={
                \"channel\":\"<<parameters.channel>>\",
                \"username\":\"<<parameters.username>>\",
                \"text\":\"<<parameters.text>>\",
                \"icon_emoji\": \"$emoji\"
              }" $<<parameters.web_hook>>
            fi
          name: Slack - Sending Deploy Event
          when: on_success

jobs:
  publish-image:
    description: "Build and publish the image to the Google Container Registry."
    machine: true
    parameters:
      gcloud-service-key:
        description: The gcloud service key
        type: env_var_name
        default: GCLOUD_SERVICE_KEY
      google-project-id:
        description: The Google project ID to connect with via the gcloud CLI
        type: env_var_name
        default: GOOGLE_PROJECT_ID
      google-compute-zone:
        description: The Google compute zone to connect with via the gcloud CLI
        type: env_var_name
        default: GOOGLE_COMPUTE_ZONE
      registry-url:
        description: The GCR registry URL from ['', us, eu, asia].gcr.io
        type: string
        default: gcr.io
      image:
        description: A name for your docker image
        type: string
      tag:
        description: A docker image tag
        type: string
        default: "latest"
      path-to-dockerfile:
        description: The relative path to the Dockerfile to use when building image
        type: string
        default: "."
      dockerfile:
        description: Name of dockerfile to use
        type: string
        default: "Dockerfile"
      extra_build_args:
        type: string
        default: ""
        description: >
          Extra flags to pass to docker build. For examples, see
          https://docs.docker.com/engine/reference/commandline/build
    steps:
      - checkout-submodule
      - attach_workspace:
          at: ./
      - gcr/gcr-auth:
          google-project-id: <<parameters.google-project-id>>
          google-compute-zone: <<parameters.google-compute-zone>>
      - install
      - gcr/build-image:
          dockerfile: <<parameters.dockerfile>>
          registry-url: <<parameters.registry-url>>
          google-project-id: <<parameters.google-project-id>>
          image: <<parameters.image>>
          tag: << parameters.tag >>
          path: <<parameters.path-to-dockerfile>>
          extra_build_args: <<parameters.extra_build_args>>
      - gcr/push-image:
          registry-url: <<parameters.registry-url>>
          google-project-id: <<parameters.google-project-id>>
          image: <<parameters.image>>
          tag: <<parameters.tag>>

  rollout-image:
    description: "Update cluster with new Docker image."
    machine: true
    parameters:
      cluster:
        description: "The Kubernetes cluster name."
        type: string
      deployment:
        description: "The Kubernetes deployment name."
        type: string
      namespace:
        description: "The Kubernetes namespace name."
        type: string
        default: "default"
      container:
        description: "The Kubernetes container name."
        type: string
      gcloud-service-key:
        description: The gcloud service key
        type: env_var_name
        default: GCLOUD_SERVICE_KEY
      google-project-id:
        description: The Google project ID to connect with via the gcloud CLI
        type: env_var_name
        default: GOOGLE_PROJECT_ID
      google-compute-zone:
        description: The Google compute zone to connect with via the gcloud CLI
        type: env_var_name
        default: GOOGLE_COMPUTE_ZONE
      registry-url:
        description: The GCR registry URL from ['', us, eu, asia].gcr.io
        type: string
        default: gcr.io
      image:
        description: A name for your docker image
        type: string
      tag:
        description: A docker image tag
        type: string
        default: "latest"
    steps:
      - checkout-submodule
      - gcr/gcr-auth:
          google-project-id: <<parameters.google-project-id>>
          google-compute-zone: <<parameters.google-compute-zone>>
      - install
      - rollout-image:
          cluster: "<<parameters.cluster>>"
          deployment: "<<parameters.deployment>>"
          namespace: "<<parameters.namespace>>"
          container: "<<parameters.container>>"
          image: "<<parameters.registry-url>>/$<<parameters.google-project-id>>/<<parameters.image>>:<<parameters.tag>>"
      - notify-datadog:
          image: "<<parameters.image>>:<<parameters.tag>>"
      - notify-sentry:
          version: "$CIRCLE_PROJECT_REPONAME:<<parameters.tag>>"
      - notify-slack:
          text: "Deployed *<<parameters.image>>:<<parameters.tag>>*

            <$CIRCLE_BUILD_URL|Build> by: <https://github.com/$CIRCLE_USERNAME|$CIRCLE_USERNAME>

            message: $GIT_COMMIT_DESC"

  publish-and-rollout-image:
    description: "Update cluster with new Docker image."
    machine: true
    parameters:
      cluster:
        description: "The Kubernetes cluster name."
        type: string
      deployment:
        description: "The Kubernetes deployment name."
        type: string
        default: ""
      namespace:
        description: "The Kubernetes namespace name."
        type: string
        default: "default"
      container:
        description: "The Kubernetes container name."
        type: string
      gcloud-service-key:
        description: The gcloud service key
        type: env_var_name
        default: GCLOUD_SERVICE_KEY
      google-project-id:
        description: The Google project ID to connect with via the gcloud CLI
        type: env_var_name
        default: GOOGLE_PROJECT_ID
      google-compute-zone:
        description: The Google compute zone to connect with via the gcloud CLI
        type: env_var_name
        default: GOOGLE_COMPUTE_ZONE
      registry-url:
        description: The GCR registry URL from ['', us, eu, asia].gcr.io
        type: string
        default: gcr.io
      image:
        description: A name for your docker image
        type: string
      tag:
        description: A docker image tag
        type: string
        default: "latest"
      stable-tag:
        description: A docker image tag added after a successful image rollout
        type: string
        default: "$CIRCLE_BRANCH.stable"
      path-to-dockerfile:
        description: The relative path to the Dockerfile to use when building image
        type: string
        default: "."
      dockerfile:
        description: Name of dockerfile to use
        type: string
        default: "Dockerfile"
      extra_build_args:
        type: string
        default: ""
        description: >
          Extra flags to pass to docker build. For examples, see
          https://docs.docker.com/engine/reference/commandline/build
    steps:
      - checkout-submodule
      - attach_workspace:
          at: ./
      - gcr/gcr-auth:
          google-project-id: <<parameters.google-project-id>>
          google-compute-zone: <<parameters.google-compute-zone>>
      - install
      - gcr/build-image:
          dockerfile: <<parameters.dockerfile>>
          registry-url: <<parameters.registry-url>>
          google-project-id: <<parameters.google-project-id>>
          image: <<parameters.image>>
          tag: << parameters.tag >>
          path: <<parameters.path-to-dockerfile>>
          extra_build_args: <<parameters.extra_build_args>>
      - gcr/push-image:
          registry-url: <<parameters.registry-url>>
          google-project-id: <<parameters.google-project-id>>
          image: <<parameters.image>>
          tag: <<parameters.tag>>
      - rollout-image:
          cluster: "<<parameters.cluster>>"
          deployment: "<<parameters.deployment>>"
          namespace: "<<parameters.namespace>>"
          container: "<<parameters.container>>"
          image: "<<parameters.registry-url>>/$<<parameters.google-project-id>>/<<parameters.image>>:<<parameters.tag>>"
      - gcr/tag-image:
          registry-url: <<parameters.registry-url>>
          google-project-id: <<parameters.google-project-id>>
          image: <<parameters.image>>
          source-tag: <<parameters.tag>>
          target-tag: "<<parameters.stable-tag>>"
      - notify-datadog:
          image: "<<parameters.image>>:<<parameters.tag>>"
      - notify-sentry:
          version: "$CIRCLE_PROJECT_REPONAME:<<parameters.tag>>"
      - notify-slack:
          text: "Deployed *<<parameters.image>>:<<parameters.tag>>*

            <$CIRCLE_BUILD_URL|Build> by: <https://github.com/$CIRCLE_USERNAME|$CIRCLE_USERNAME>

            message: $GIT_COMMIT_DESC"
example:
  publish-image:
    description: |
      "Logs into GCP, builds and publishes a Docker image. Can be used to parallelize deployments and 
      reduce deployment time after a manual approval step."
    usage:
      version: 2.1
      orbs:
        gke: felicianotech/test-gke@dev:testing-3
      workflows:
        main:
          jobs:
            - build
            - gke/publish-image:
                image: orb-badge-server
                tag: "2"
  rollout-image:
    description: |
      "Rolls out a published Docker image to a GKE cluster. Can be used to parallelize deployments and 
      reduce deployment time after a manual approval step."
    usage:
      version: 2.1
      orbs:
        gke: felicianotech/test-gke@dev:testing-3
      workflows:
        main:
          jobs:
            - build
            - gke/publish-image:
                image: orb-badge-server
                tag: "2"
            - gke/rollout-image:
                image: orb-badge-server
                tag: "2"
  publish-and-rollout-image:
    description: |
      "The simplest example of using this Orb. Logs into GCP, builds and
      publishes a Docker image, and then rolls the image out to a GKE cluster."
    usage:
      version: 2.1
      orbs:
        gke: felicianotech/test-gke@dev:testing-3
      workflows:
        main:
          jobs:
            - build
            - gke/publish-and-rollout-image:
                context: gcp-testing
                deployment: orb-badge-server
                image: orb-badge-server
                tag: "2"
