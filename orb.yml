version: 2.1
description: Google Kubernetes Engine (GKE) Orb

# Orb Dependencies
orbs:
  gcloud: circleci/gcp-cli@1.0.6
  gcr: circleci/gcp-gcr@0.6.1
  k8s: circleci/kubernetes@0.1.0

commands:
  install:
    description: "Install `gcloud` and `kubectl` if not already installed."
    steps:
      - gcloud/install
      - k8s/install
  init:
    description: "Initialize the `gcloud` CLI."
    steps:
      - gcloud/initialize
  rollout-image:
    description: "Update a deployment's Docker image."
    parameters:
      cluster:
        description: "The Kubernetes cluster name."
        type: string
      deployment:
        description: "The Kubernetes deployment name."
        type: string
      container:
        description: "The Kubernetes container name."
        type: string
      image:
        description: A name for your docker image
        type: string
      namespace:
        description: "The Kubernetes namespace name."
        type: string
        default: "default"
    steps:
      - run: |
          gcloud container clusters get-credentials <<parameters.cluster>>
          kubectl -n <<parameters.namespace>> set image deployment <<parameters.deployment>> <<parameters.container>>=<<parameters.image>>
  notify-datadog:
    description: Send a deploy event to DataDog
    parameters:
      api_key:
        description: Datadog API Key
        type: env_var_name
        default: DATADOG_API_KEY
      image:
        description: Deployed image
        type: string
    steps:
      - run:
          command: |
            curl -X POST -H "Content-type: application/json" --data \
              "{
                \"title\": \"Deployed <<parameters.image>>\",
                \"text\": \"Oh boy! New deployment for $CIRCLE_PROJECT_REPONAME on $CIRCLE_BRANCH. See more information here: $CIRCLE_BUILD_URL\",
                \"priority\": \"normal\",
                \"alert_type\": \"info\",
                \"source_type_name\": \"circleci\",
                \"aggregation_key\": \"deploys\",
                \"tags\": [
                  \"kube_deployment:$CIRCLE_PROJECT_REPONAME\",
                  \"repository:$CIRCLE_PROJECT_REPONAME\",
                  \"organization:$CIRCLE_PROJECT_USERNAME\",
                  \"branch:$CIRCLE_BRANCH\",
                  \"build_num:$CIRCLE_BUILD_NUM\",
                  \"job:$CIRCLE_JOB\",
                  \"started_by:$CIRCLE_USERNAME\"
                ]
              }" "https://api.datadoghq.com/api/v1/events?api_key=$<<parameters.api_key>>"
          name: Datadog - Sending Deploy Event
          when: on_success
  notify-sentry:
    description: Send a deploy event to Sentry
    parameters:
      api_key:
        description: Sentry API Key
        type: env_var_name
        default: SENTRY_API_KEY
      image:
        description: Deployed image
        type: string
    steps:
      - run:
          command: |
            if [[ -z "$<<parameters.api_key>>" ]]; then
              echo "Skipping Sentry notification as SENTRY_API_KEY not set"
            else
              curl  -XPOST -s -H 'Content-Type: application/json' \
                -H "Authorization: Bearer $<<parameters.api_key>>" --data \
                "{
                  \"version\": \"<<parameters.image>>\",
                  \"url\":\"$CIRCLE_BUILD_URL\",
                  \"refs\":[{
                    \"repository\":\"$CIRCLE_PROJECT_REPONAME\",
                    \"commit\":\"$CIRCLE_SHA1
                  \"}],
                  \"projects\":[
                    \"$CIRCLE_PROJECT_REPONAME
                  \"]
                }" "https://sentry.io/api/0/organizations/titelmedia-gmbh/releases/"
            fi
          name: Sentry - Sending Deploy Event
          when: on_success

jobs:
  publish-and-rollout-image:
    description: "Update cluster with new Docker image."
    machine: true
    parameters:
      cluster:
        description: "The Kubernetes cluster name."
        type: string
      deployment:
        description: "The Kubernetes deployment name."
        type: string
      namespace:
        description: "The Kubernetes namespace name."
        type: string
        default: "default"
      container:
        description: "The Kubernetes container name."
        type: string
      gcloud-service-key:
        description: The gcloud service key
        type: env_var_name
        default: GCLOUD_SERVICE_KEY
      google-project-id:
        description: The Google project ID to connect with via the gcloud CLI
        type: env_var_name
        default: GOOGLE_PROJECT_ID
      google-compute-zone:
        description: The Google compute zone to connect with via the gcloud CLI
        type: env_var_name
        default: GOOGLE_COMPUTE_ZONE
      registry-url:
        description: The GCR registry URL from ['', us, eu, asia].gcr.io
        type: string
        default: gcr.io
      image:
        description: A name for your docker image
        type: string
      tag:
        description: A docker image tag
        type: string
        default: "latest"
      path-to-dockerfile:
        description: The relative path to the Dockerfile to use when building image
        type: string
        default: "."
    steps:
      - checkout
      - run:
          name: "Pull Submodules"
          command: |
            git submodule init
            git submodule update --remote
      - gcr/gcr-auth:
          google-project-id: <<parameters.google-project-id>>
          google-compute-zone: <<parameters.google-compute-zone>>
      - install
      - gcr/build-image:
          registry-url: <<parameters.registry-url>>
          google-project-id: <<parameters.google-project-id>>
          image: <<parameters.image>>
          tag: << parameters.tag >>
          path: <<parameters.path-to-dockerfile>>
      - gcr/push-image:
          registry-url: <<parameters.registry-url>>
          google-project-id: <<parameters.google-project-id>>
          image: <<parameters.image>>
          tag: <<parameters.tag>>
      - rollout-image:
          cluster: "<<parameters.cluster>>"
          deployment: "<<parameters.deployment>>"
          namespace: "<<parameters.namespace>>"
          container: "<<parameters.container>>"
          image: "<<parameters.registry-url>>/$<<parameters.google-project-id>>/<<parameters.image>>:<<parameters.tag>>"
      - notify-datadog:
          image: "<<parameters.image>>:<<parameters.tag>>"
      - notify-sentry:
          image: "<<parameters.image>>:<<parameters.tag>>"
example:
  publish-and-rollout-image:
    description: |
      "The simplest example of using this Orb. Logs into GCP, builds and
      publishes a Docker image, and then rolls the image out to a GKE cluster."
    usage:
      version: 2.1
      orbs:
        gke: felicianotech/test-gke@dev:testing-3
      workflows:
        main:
          jobs:
            - build
            - gke/publish-and-rollout-image:
                context: gcp-testing
                deployment: orb-badge-server
                image: orb-badge-server
                tag: "2"
